### Questão 1:
**Enunciado:** A organização de Natação pediu para gerar dados da última competição, trazendo uma lista com os 3 melhores tempos de cada modalidade.

**Resposta:**

Para essa consulta, vamos utilizar a cláusula `ROW_NUMBER` para numerar os tempos de cada atleta dentro de cada modalidade, e então selecionar os três primeiros tempos de cada modalidade. Supondo que a tabela se chama `resultado_natacao`, a consulta seria:

```sql
WITH RankedResults AS (
    SELECT
        modalidade,
        nome_atleta,
        tempo,
        ROW_NUMBER() OVER (PARTITION BY modalidade ORDER BY tempo) AS ranking
    FROM
        resultado_natacao
    WHERE
        data_competicao = '2023-09-17'
)
SELECT
    modalidade,
    nome_atleta,
    tempo,
    ranking
FROM
    RankedResults
WHERE
    ranking <= 3;
```

### Questão 2:
**Enunciado:** O que são transações no SQL Server e qual é a importância do controle de concorrência no processamento de transações?

**Resposta:**

Transações no SQL Server são unidades de trabalho que consistem em uma ou mais instruções SQL executadas como um bloco único. As transações garantem que o banco de dados passe de um estado consistente para outro, respeitando as propriedades ACID (Atomicidade, Consistência, Isolamento e Durabilidade).

A importância do controle de concorrência no processamento de transações reside na necessidade de garantir que múltiplas transações possam ocorrer simultaneamente sem causar inconsistências nos dados. Isso é feito através de mecanismos como locks e níveis de isolamento, que ajudam a prevenir problemas como leituras sujas, leituras não repetíveis e phantom reads.

### Questão 3:
**Enunciado:** Marque VERDADEIRO ou FALSO para as afirmações sobre locks no SQL Server.

**Afirmações:**

1. ( ) O shared lock, em uma transação, permite que várias outras transações leiam os mesmos dados ao mesmo tempo, mas impede que outras transações atualizem ou excluam esses dados.
2. ( ) O exclusive lock, em uma transação, impede que outras transações acessem ou alterem os dados dessa transação.
3. ( ) Quando um objeto dentro de uma transação recebe um exclusive lock, é possível liberar o lock deste objeto sem que a transação tenha sido finalizada.
4. ( ) Quando um objeto dentro de uma transação recebe um shared lock, é possível liberar o lock deste objeto sem que a transação tenha sido finalizada.
5. ( ) Os shared lock e exclusive lock só são liberados quando uma transação (implícita ou explícita) é finalizada.

**Respostas:**

1. ( V ) O shared lock, em uma transação, permite que várias outras transações leiam os mesmos dados ao mesmo tempo, mas impede que outras transações atualizem ou excluam esses dados.
2. ( V ) O exclusive lock, em uma transação, impede que outras transações acessem ou alterem os dados dessa transação.
3. ( F ) Quando um objeto dentro de uma transação recebe um exclusive lock, é possível liberar o lock deste objeto sem que a transação tenha sido finalizada.
4. ( F ) Quando um objeto dentro de uma transação recebe um shared lock, é possível liberar o lock deste objeto sem que a transação tenha sido finalizada.
5. ( F ) Os shared lock e exclusive lock só são liberados quando uma transação (implícita ou explícita) é finalizada.

**Alternativa correta: V, V, F, F, F**

### Questão 4:
**Enunciado:** Como o uso de índices pode ajudar a minimizar problemas de bloqueio e melhorar a performance no SQL Server? Explique suas razões.

**Resposta:**

O uso de índices pode melhorar a performance no SQL Server de várias maneiras:

1. **Redução do Escaneamento de Tabelas**: Índices permitem que o SQL Server localize registros específicos sem ter que escanear toda a tabela, o que reduz o tempo de execução das consultas.
2. **Melhoria no Desempenho de Consultas**: Consultas que usam índices são mais rápidas porque o índice fornece um caminho mais eficiente para encontrar os dados.
3. **Menos Bloqueios**: Como os índices permitem acesso mais rápido aos dados, a duração dos locks nas transações pode ser reduzida, diminuindo a chance de bloqueios prolongados que afetam outras transações.
4. **Isolamento de Transações**: Índices podem ajudar no isolamento de transações ao permitir que leituras ocorram sem interferir em operações de escrita, e vice-versa, dependendo do tipo de lock utilizado.
5. **Execução de Junções**: Índices podem acelerar a execução de junções entre tabelas, reduzindo a carga de trabalho no banco de dados e melhorando o desempenho geral.

### Questão 5:
**Enunciado:** Marque VERDADEIRO ou FALSO para as afirmações sobre junções de tabelas.

**Afirmações:**

1. ( ) O INNER JOIN retorna todas as linhas de ambas as tabelas que têm valores correspondentes nas colunas de junção especificadas.
2. ( ) O LEFT JOIN entre duas tabelas retorna todas as linhas da tabela à esquerda e as linhas correspondentes da tabela à direita. Se não houver correspondência, NULL é retornado para as colunas da tabela à direita.
3. ( ) O RIGHT JOIN é similar a um LEFT JOIN, mas ele inverte a ordem das tabelas, retornando todas as linhas da tabela à direita e as linhas correspondentes da tabela à esquerda.
4. ( ) O FULL JOIN entre duas tabelas retorna todas as linhas de ambas as tabelas, incluindo as que não têm correspondência. As colunas da tabela sem correspondência são preenchidas com NULL.
5. ( ) O CROSS JOIN (também conhecido como produto cartesiano) combina cada linha da primeira tabela com todas as linhas da segunda tabela, criando um conjunto de resultados que contém todas as combinações possíveis entre os registros das duas tabelas, sem levar em consideração qualquer critério de correspondência específico.

**Respostas:**

1. ( V ) O INNER JOIN retorna todas as linhas de ambas as tabelas que têm valores correspondentes nas colunas de junção especificadas.
2. ( V ) O LEFT JOIN entre duas tabelas retorna todas as linhas da tabela à esquerda e as linhas correspondentes da tabela à direita. Se não houver correspondência, NULL é retornado para as colunas da tabela à direita.
3. ( V ) O RIGHT JOIN é similar a um LEFT JOIN, mas ele inverte a ordem das tabelas, retornando todas as linhas da tabela à direita e as linhas correspondentes da tabela à esquerda.
4. ( V ) O FULL JOIN entre duas tabelas retorna todas as linhas de ambas as tabelas, incluindo as que não têm correspondência. As colunas da tabela sem correspondência são preenchidas com NULL.
5. ( V ) O CROSS JOIN (também conhecido como produto cartesiano) combina cada linha da primeira tabela com todas as linhas da segunda tabela, criando um conjunto de resultados que contém todas as combinações possíveis entre os registros das duas tabelas, sem levar em consideração qualquer critério de correspondência específico.

**Alternativa correta: V, V, V, V, V**

### Questão 6:
**Enunciado:** Marque VERDADEIRO ou FALSO para as afirmações sobre índices em bancos de dados.

**Afirmações:**

1. ( ) É possível ter mais um índice clustered por tabela, desde que a chave do índice seja diferente.
2. ( ) Não é possível criar índices nonclustered usando a mesma chave (mesmo coluna) que um índice clustered, mesmo que tenham nomes de índices diferentes.
3. ( ) Um índice clustered pode ter mais de uma coluna como chave.
4. ( ) A sintaxe - create index idx_data_competicao on resultado_natacao(data_competicao) - cria um índice chamado data_competicao na tabela resultado_natacao, usando a coluna idx_data_competicao como chave deste índice.
5. ( ) No nível folha de um índice clustered, encontramos todas as colunas da tabela, independente da(s) coluna(s) escolhida(s) como chave.
6. ( ) No nível folha de um índice nonclustered, encontramos todas as colunas da tabela, independente da(s) coluna(s) escolhida(s) como chave.

**Respostas:**

1. ( F ) É possível ter mais um índice clustered por tabela, desde que a chave do índice seja diferente.
2. ( F ) Não é possível criar índices nonclustered usando a mesma chave (mesmo coluna) que um índice clustered, mesmo que tenham nomes de índices diferentes.
3. ( V ) Um índice clustered pode ter mais de uma coluna como chave.
4. ( F ) A sintaxe - create index idx_data_competicao on resultado_natacao(data_competicao) - cria um índice chamado idx_data_competicao na tabela resultado_natacao, usando a coluna data_competicao como chave deste índice.
5. ( V ) No nível folha de um índice clustered, encontramos todas as colunas da tabela, independente da(s) coluna(s) escolhida(s) como chave.
6. ( F ) No nível folha de um índice nonclustered, encontramos todas as colunas da tabela, independente da(s) coluna(s) escolhida(s) como chave.

**Alternativa correta: F, F, V, F, V, F**

### Questão 7:
**Enunciado:** Crie um índice para a consulta fornecida.

**Consulta:**

```sql
SELECT data_competicao, modalidade, nome_atleta, tempo
FROM resultado_natacao
WHERE data_competicao = '2023-09-17';
```

**Resposta:**

Para otimizar esta consulta, o índice deve ser criado na coluna `data_competicao` e incluir as colunas `modalidade`, `nome_atleta` e `tempo` para cobrir a consulta completamente. Isso evitará a necessidade de fazer uma busca adicional (lookup) nos dados.

O comando SQL para criar este índice seria:

```sql
CREATE INDEX idx_data_competicao_incl
ON resultado_natacao (data_competicao)
INCLUDE (modalidade, nome_atleta, tempo);
```

Este índice utiliza `data_competicao` como chave principal e inclui as outras colunas necessárias para a consulta, o que melhora a performance ao evitar a leitura desnecessária de páginas de dados adicionais.

### Questão 8:
**Enunciado:** Gerar lista com o código do agendamento, nome do paciente, nome do profissional, data de início e fim do agendamento somente do ano de 2020, ordenado pela data de início dos agendamentos.

**Resposta:**

Para resolver esta questão, vamos utilizar uma junção entre as tabelas `agenda`, `paciente` e `profissional` para obter as informações necessárias. A consulta deve filtrar os agendamentos do ano de 2020 e ordenar pela data de início (`dt_inicio`).

```sql
SELECT
    a.cd_agenda,
    p.nm_paciente,
    pr.nm_profissional,
    a.dt_inicio,
    a.dt_fim
FROM
    agenda a
JOIN
    paciente p ON a.cd_paciente = p.cd_paciente
JOIN
    profissional pr ON a.cd_profissional = pr.cd_profissional
WHERE
    YEAR(a.dt_inicio) = 2020
ORDER BY
    a.dt_inicio;
```

### Questão 9:
**Enunciado:** Informar o nome dos profissionais que não tiveram nenhum agendamento marcado para o ano de 2021 usando subquery correlacionada com EXISTS.

**Resposta:**

Para resolver esta questão, utilizamos uma subquery correlacionada com EXISTS para identificar os profissionais que não têm agendamentos no ano de 2021.

```sql
SELECT
    pr.nm_profissional
FROM
    profissional pr
WHERE
    NOT EXISTS (
        SELECT 1
        FROM agenda a
        WHERE a.cd_profissional = pr.cd_profissional
        AND YEAR(a.dt_inicio) = 2021
    );
```

### Questão 10:
**Enunciado:** Informar o nome dos profissionais que não tiveram nenhum agendamento marcado.

**Resposta:**

Para resolver esta questão, utilizamos uma junção LEFT JOIN entre as tabelas `profissional` e `agenda` para identificar os profissionais que não têm agendamentos. Em seguida, filtramos para manter apenas aqueles que não possuem registros de agendamentos.

```sql
SELECT
    pr.nm_profissional
FROM
    profissional pr
LEFT JOIN
    agenda a ON pr.cd_profissional = a.cd_profissional
WHERE
    a.cd_agenda IS NULL;
```

### Resumo das Respostas:

### Questão 8:
    ```sql
    SELECT
        a.cd_agenda,
        p.nm_paciente,
        pr.nm_profissional,
        a.dt_inicio,
        a.dt_fim
    FROM
        agenda a
    JOIN
        paciente p ON a.cd_paciente = p.cd_paciente
    JOIN
        profissional pr ON a.cd_profissional = pr.cd_profissional
    WHERE
        YEAR(a.dt_inicio) = 2020
    ORDER BY
        a.dt_inicio;
    ```

### Questão 9:
    ```sql
    SELECT
        pr.nm_profissional
    FROM
        profissional pr
    WHERE
        NOT EXISTS (
            SELECT 1
            FROM agenda a
            WHERE a.cd_profissional = pr.cd_profissional
            AND YEAR(a.dt_inicio) = 2021
        );
    ```

## Questão 10:
    ```sql
    SELECT
        pr.nm_profissional
    FROM
        profissional pr
    LEFT JOIN
        agenda a ON pr.cd_profissional = a.cd_profissional
    WHERE
        a.cd_agenda IS NULL;
    ```

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
EZERCÍCIO DE TRIGER

### 1. Criar um banco de dados e tabelas
Primeiro, vamos criar o banco de dados e as tabelas `conta`, `lancamento` e `saldo`.

```sql
-- Criando o banco de dados
CREATE DATABASE SimulacaoContaCorrente;
GO

USE SimulacaoContaCorrente;
GO

-- Criando a tabela conta
CREATE TABLE conta (
    codigo_conta INT PRIMARY KEY,
    nome_correntista NVARCHAR(100) NOT NULL,
    status BIT NOT NULL
);
GO

-- Criando a tabela lancamento
CREATE TABLE lancamento (
    data_operacao DATETIME NOT NULL,
    codigo_conta INT FOREIGN KEY REFERENCES conta(codigo_conta),
    descricao_operacao NVARCHAR(100),
    tipo_operacao CHAR(1) CHECK (tipo_operacao IN ('D', 'C')),
    valor_operacao DECIMAL(18, 2) NOT NULL
);
GO

-- Criando a tabela saldo
CREATE TABLE saldo (
    data_saldo DATETIME NOT NULL,
    codigo_conta INT FOREIGN KEY REFERENCES conta(codigo_conta),
    valor_saldo DECIMAL(18, 2) NOT NULL,
    PRIMARY KEY (data_saldo, codigo_conta)
);
GO
```

### 2. Criar a procedure para adicionar um lançamento e a trigger para atualizar o saldo

#### Procedure para adicionar lançamento
```sql
CREATE PROCEDURE AdicionarLancamento
    @codigo_conta INT,
    @descricao_operacao NVARCHAR(100),
    @tipo_operacao CHAR(1),
    @valor_operacao DECIMAL(18, 2)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @data_operacao DATETIME = GETDATE();

    -- Verificar se a conta está ativa
    IF NOT EXISTS (SELECT 1 FROM conta WHERE codigo_conta = @codigo_conta AND status = 1)
    BEGIN
        THROW 50001, 'Conta não está ativa ou não existe.', 1;
    END

    -- Inserir lançamento
    INSERT INTO lancamento (data_operacao, codigo_conta, descricao_operacao, tipo_operacao, valor_operacao)
    VALUES (@data_operacao, @codigo_conta, @descricao_operacao, @tipo_operacao, @valor_operacao);
END;
GO
```

#### Trigger para atualizar saldo
```sql
CREATE TRIGGER AtualizarSaldo
ON lancamento
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @codigo_conta INT, @tipo_operacao CHAR(1), @valor_operacao DECIMAL(18, 2), @data_operacao DATETIME;

    SELECT @codigo_conta = inserted.codigo_conta, 
           @tipo_operacao = inserted.tipo_operacao, 
           @valor_operacao = inserted.valor_operacao,
           @data_operacao = inserted.data_operacao
    FROM inserted;

    IF EXISTS (SELECT 1 FROM saldo WHERE codigo_conta = @codigo_conta AND data_saldo = CAST(@data_operacao AS DATE))
    BEGIN
        IF @tipo_operacao = 'C'
        BEGIN
            UPDATE saldo 
            SET valor_saldo = valor_saldo + @valor_operacao 
            WHERE codigo_conta = @codigo_conta AND data_saldo = CAST(@data_operacao AS DATE);
        END
        ELSE
        BEGIN
            UPDATE saldo 
            SET valor_saldo = valor_saldo - @valor_operacao 
            WHERE codigo_conta = @codigo_conta AND data_saldo = CAST(@data_operacao AS DATE);
        END
    END
    ELSE
    BEGIN
        DECLARE @valor_saldo DECIMAL(18, 2);

        SET @valor_saldo = 
            (SELECT TOP 1 valor_saldo 
             FROM saldo 
             WHERE codigo_conta = @codigo_conta 
             ORDER BY data_saldo DESC);

        IF @valor_saldo IS NULL 
            SET @valor_saldo = 0;

        IF @tipo_operacao = 'C'
            SET @valor_saldo = @valor_saldo + @valor_operacao;
        ELSE
            SET @valor_saldo = @valor_saldo - @valor_operacao;

        INSERT INTO saldo (data_saldo, codigo_conta, valor_saldo)
        VALUES (CAST(@data_operacao AS DATE), @codigo_conta, @valor_saldo);
    END
END;
GO
```

### 3. Procedure para transferência de valores
```sql
CREATE PROCEDURE TransferirValores
    @codigo_conta_origem INT,
    @codigo_conta_destino INT,
    @valor_transferencia DECIMAL(18, 2)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- Verificar se ambas as contas estão ativas
        IF NOT EXISTS (SELECT 1 FROM conta WHERE codigo_conta = @codigo_conta_origem AND status = 1)
        BEGIN
            THROW 50002, 'Conta de origem não está ativa ou não existe.', 1;
        END

        IF NOT EXISTS (SELECT 1 FROM conta WHERE codigo_conta = @codigo_conta_destino AND status = 1)
        BEGIN
            THROW 50003, 'Conta de destino não está ativa ou não existe.', 1;
        END

        -- Debitar da conta de origem
        EXEC AdicionarLancamento @codigo_conta = @codigo_conta_origem, 
                                 @descricao_operacao = 'Transferência para conta ' + CAST(@codigo_conta_destino AS NVARCHAR(10)), 
                                 @tipo_operacao = 'D', 
                                 @valor_operacao = @valor_transferencia;

        -- Creditar na conta de destino
        EXEC AdicionarLancamento @codigo_conta = @codigo_conta_destino, 
                                 @descricao_operacao = 'Transferência da conta ' + CAST(@codigo_conta_origem AS NVARCHAR(10)), 
                                 @tipo_operacao = 'C', 
                                 @valor_operacao = @valor_transferencia;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        THROW;
    END CATCH
END;
GO
```

### 4. Criar tabela de log e triggers para auditoria
```sql
-- Criando a tabela de log
CREATE TABLE log_auditoria (
    data_hora_operacao DATETIME DEFAULT GETDATE(),
    tipo_operacao CHAR(1) CHECK (tipo_operacao IN ('D', 'I', 'U')),
    nome_usuario NVARCHAR(128) DEFAULT SUSER_NAME(),
    descricao NVARCHAR(4000)
);
GO

-- Trigger para auditoria na tabela conta
CREATE TRIGGER AuditoriaConta
ON conta
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @descricao NVARCHAR(4000);

    IF EXISTS (SELECT * FROM inserted)
    BEGIN
        SET @descricao = 'INSERT/UPDATE na tabela conta: ' + (SELECT * FROM inserted FOR XML PATH(''));
        INSERT INTO log_auditoria (tipo_operacao, descricao) VALUES ('I', @descricao);
    END
    ELSE IF EXISTS (SELECT * FROM deleted)
    BEGIN
        SET @descricao = 'DELETE na tabela conta: ' + (SELECT * FROM deleted FOR XML PATH(''));
        INSERT INTO log_auditoria (tipo_operacao, descricao) VALUES ('D', @descricao);
    END
END;
GO

-- Trigger para auditoria na tabela lancamento
CREATE TRIGGER AuditoriaLancamento
ON lancamento
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @descricao NVARCHAR(4000);

    IF EXISTS (SELECT * FROM inserted)
    BEGIN
        SET @descricao = 'INSERT/UPDATE na tabela lancamento: ' + (SELECT * FROM inserted FOR XML PATH(''));
        INSERT INTO log_auditoria (tipo_operacao, descricao) VALUES ('I', @descricao);
    END
    ELSE IF EXISTS (SELECT * FROM deleted)
    BEGIN
        SET @descricao = 'DELETE na tabela lancamento: ' + (SELECT * FROM deleted FOR XML PATH(''));
        INSERT INTO log_auditoria (tipo_operacao, descricao) VALUES ('D', @descricao);
    END
END;
GO

-- Trigger para auditoria na tabela saldo
CREATE TRIGGER AuditoriaSaldo
ON saldo
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @descricao NVARCHAR(4000);

    IF EXISTS (SELECT * FROM inserted)
    BEGIN
        SET @descricao = 'INSERT/UPDATE na tabela saldo: ' + (SELECT * FROM inserted FOR XML PATH(''));
        INSERT INTO log_auditoria (tipo_operacao, descricao) VALUES ('I', @descricao);
    END
    ELSE IF EXISTS (SELECT * FROM deleted)
    BEGIN
        SET @descricao = 'DELETE na tabela saldo: ' + (SELECT * FROM deleted FOR XML PATH(''));
        INSERT INTO log_auditoria (tipo_operacao, descricao) VALUES ('D', @descricao);
    END
END;
GO
```

Esses scripts SQL criam o ambiente necessário para a simulação de uma conta corrente com operações de lançamento e transferência de valores, além de manter um log de auditoria para modificações nas tabelas.
